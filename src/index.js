/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AzureBlobStorage', 'model/Error', 'model/FileRequest', 'model/FileResponse', 'model/FileSetRequest', 'model/FileSetResponse', 'model/LocalStorage', 'model/ModelPackage', 'model/PackageEventResponse', 'model/PackageEventSetResponse', 'model/PackageTokenRequest', 'model/PackageTokenResponse', 'model/Portal', 'model/PortalFolder', 'model/PortalList', 'model/PortalMember', 'model/PortalMemberRequest', 'model/PortalMemberResponse', 'model/PortalStorage', 'model/PortalStorageList', 'model/PortalSubscriptionRequest', 'model/PortalSubscriptionResponse', 'model/PortalSubscriptionsResponse', 'model/S3Storage', 'model/Storage', 'model/StorageList', 'model/Transfer', 'model/TransferList', 'model/User', 'api/PortalsApi', 'api/StorageApi', 'api/SystemToPersonApi', 'api/TransfersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AzureBlobStorage'), require('./model/Error'), require('./model/FileRequest'), require('./model/FileResponse'), require('./model/FileSetRequest'), require('./model/FileSetResponse'), require('./model/LocalStorage'), require('./model/ModelPackage'), require('./model/PackageEventResponse'), require('./model/PackageEventSetResponse'), require('./model/PackageTokenRequest'), require('./model/PackageTokenResponse'), require('./model/Portal'), require('./model/PortalFolder'), require('./model/PortalList'), require('./model/PortalMember'), require('./model/PortalMemberRequest'), require('./model/PortalMemberResponse'), require('./model/PortalStorage'), require('./model/PortalStorageList'), require('./model/PortalSubscriptionRequest'), require('./model/PortalSubscriptionResponse'), require('./model/PortalSubscriptionsResponse'), require('./model/S3Storage'), require('./model/Storage'), require('./model/StorageList'), require('./model/Transfer'), require('./model/TransferList'), require('./model/User'), require('./api/PortalsApi'), require('./api/StorageApi'), require('./api/SystemToPersonApi'), require('./api/TransfersApi'));
  }
}(function(ApiClient, AzureBlobStorage, Error, FileRequest, FileResponse, FileSetRequest, FileSetResponse, LocalStorage, ModelPackage, PackageEventResponse, PackageEventSetResponse, PackageTokenRequest, PackageTokenResponse, Portal, PortalFolder, PortalList, PortalMember, PortalMemberRequest, PortalMemberResponse, PortalStorage, PortalStorageList, PortalSubscriptionRequest, PortalSubscriptionResponse, PortalSubscriptionsResponse, S3Storage, Storage, StorageList, Transfer, TransferList, User, PortalsApi, StorageApi, SystemToPersonApi, TransfersApi) {
  'use strict';

  /**
   * Signiants_Media_Shuttle_Management_API_endpoints_allows_you_to_automate_portal_and_storage_management_and_view_active_transfers_using_your_own_web_applications_The_System_to_Person_API_allows_you_to_create_upload_and_download_links_directly_from_other_applications_letting_you_accelerate_file_transfers_through_Media_Shuttle_For_more_information_about_getting_started_with_the_Media_Shuttle_API_read_our__Getting_Started_Guide_httpdeveloper_signiant_commsapigetting_started_html____You_can_test_API_endpoints_using_your_Media_Shuttle_subscription_by_generating_an_API_key_from_your_IT_Administration_user_menu_in_the_Developer_section_Once_you_have_generated_an_API_key_click_the_Authorize_button_and_enter_your_API_key_in_the_Value_field_and_click_Authorize_to_enable_the_examples_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var MediaShuttleApi = require('index'); // See note below*.
   * var xxxSvc = new MediaShuttleApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new MediaShuttleApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new MediaShuttleApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new MediaShuttleApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.13.3
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AzureBlobStorage model constructor.
     * @property {module:model/AzureBlobStorage}
     */
    AzureBlobStorage: AzureBlobStorage,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The FileRequest model constructor.
     * @property {module:model/FileRequest}
     */
    FileRequest: FileRequest,
    /**
     * The FileResponse model constructor.
     * @property {module:model/FileResponse}
     */
    FileResponse: FileResponse,
    /**
     * The FileSetRequest model constructor.
     * @property {module:model/FileSetRequest}
     */
    FileSetRequest: FileSetRequest,
    /**
     * The FileSetResponse model constructor.
     * @property {module:model/FileSetResponse}
     */
    FileSetResponse: FileSetResponse,
    /**
     * The LocalStorage model constructor.
     * @property {module:model/LocalStorage}
     */
    LocalStorage: LocalStorage,
    /**
     * The ModelPackage model constructor.
     * @property {module:model/ModelPackage}
     */
    ModelPackage: ModelPackage,
    /**
     * The PackageEventResponse model constructor.
     * @property {module:model/PackageEventResponse}
     */
    PackageEventResponse: PackageEventResponse,
    /**
     * The PackageEventSetResponse model constructor.
     * @property {module:model/PackageEventSetResponse}
     */
    PackageEventSetResponse: PackageEventSetResponse,
    /**
     * The PackageTokenRequest model constructor.
     * @property {module:model/PackageTokenRequest}
     */
    PackageTokenRequest: PackageTokenRequest,
    /**
     * The PackageTokenResponse model constructor.
     * @property {module:model/PackageTokenResponse}
     */
    PackageTokenResponse: PackageTokenResponse,
    /**
     * The Portal model constructor.
     * @property {module:model/Portal}
     */
    Portal: Portal,
    /**
     * The PortalFolder model constructor.
     * @property {module:model/PortalFolder}
     */
    PortalFolder: PortalFolder,
    /**
     * The PortalList model constructor.
     * @property {module:model/PortalList}
     */
    PortalList: PortalList,
    /**
     * The PortalMember model constructor.
     * @property {module:model/PortalMember}
     */
    PortalMember: PortalMember,
    /**
     * The PortalMemberRequest model constructor.
     * @property {module:model/PortalMemberRequest}
     */
    PortalMemberRequest: PortalMemberRequest,
    /**
     * The PortalMemberResponse model constructor.
     * @property {module:model/PortalMemberResponse}
     */
    PortalMemberResponse: PortalMemberResponse,
    /**
     * The PortalStorage model constructor.
     * @property {module:model/PortalStorage}
     */
    PortalStorage: PortalStorage,
    /**
     * The PortalStorageList model constructor.
     * @property {module:model/PortalStorageList}
     */
    PortalStorageList: PortalStorageList,
    /**
     * The PortalSubscriptionRequest model constructor.
     * @property {module:model/PortalSubscriptionRequest}
     */
    PortalSubscriptionRequest: PortalSubscriptionRequest,
    /**
     * The PortalSubscriptionResponse model constructor.
     * @property {module:model/PortalSubscriptionResponse}
     */
    PortalSubscriptionResponse: PortalSubscriptionResponse,
    /**
     * The PortalSubscriptionsResponse model constructor.
     * @property {module:model/PortalSubscriptionsResponse}
     */
    PortalSubscriptionsResponse: PortalSubscriptionsResponse,
    /**
     * The S3Storage model constructor.
     * @property {module:model/S3Storage}
     */
    S3Storage: S3Storage,
    /**
     * The Storage model constructor.
     * @property {module:model/Storage}
     */
    Storage: Storage,
    /**
     * The StorageList model constructor.
     * @property {module:model/StorageList}
     */
    StorageList: StorageList,
    /**
     * The Transfer model constructor.
     * @property {module:model/Transfer}
     */
    Transfer: Transfer,
    /**
     * The TransferList model constructor.
     * @property {module:model/TransferList}
     */
    TransferList: TransferList,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The PortalsApi service constructor.
     * @property {module:api/PortalsApi}
     */
    PortalsApi: PortalsApi,
    /**
     * The StorageApi service constructor.
     * @property {module:api/StorageApi}
     */
    StorageApi: StorageApi,
    /**
     * The SystemToPersonApi service constructor.
     * @property {module:api/SystemToPersonApi}
     */
    SystemToPersonApi: SystemToPersonApi,
    /**
     * The TransfersApi service constructor.
     * @property {module:api/TransfersApi}
     */
    TransfersApi: TransfersApi
  };

  return exports;
}));
