/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/TransferList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/TransferList'));
  } else {
    // Browser globals (root is window)
    if (!root.MediaShuttleApi) {
      root.MediaShuttleApi = {};
    }
    root.MediaShuttleApi.TransfersApi = factory(root.MediaShuttleApi.ApiClient, root.MediaShuttleApi.Error, root.MediaShuttleApi.TransferList);
  }
}(this, function(ApiClient, Error, TransferList) {
  'use strict';

  /**
   * Transfers service.
   * @module api/TransfersApi
   * @version 1.13.3
   */

  /**
   * Constructs a new TransfersApi. 
   * @alias module:api/TransfersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTransfers operation.
     * @callback module:api/TransfersApi~getTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List current active transfers
     * Return a list of transfers across all portals associated with the account.
     * @param {String} state Return a list of active transfers. All requests must include `state=active`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.portalId Filter the response by specific portal IDs. You can repeat this query to list transfers from more than one portal per request.
     * @param {module:api/TransfersApi~getTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferList}
     */
    this.getTransfers = function(state, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling getTransfers");
      }


      var pathParams = {
      };
      var queryParams = {
        'state': state,
        'portalId': opts['portalId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransferList;

      return this.apiClient.callApi(
        '/transfers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
