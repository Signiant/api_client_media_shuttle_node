/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Storage', 'model/StorageList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Storage'), require('../model/StorageList'));
  } else {
    // Browser globals (root is window)
    if (!root.MediaShuttleApi) {
      root.MediaShuttleApi = {};
    }
    root.MediaShuttleApi.StorageApi = factory(root.MediaShuttleApi.ApiClient, root.MediaShuttleApi.Error, root.MediaShuttleApi.Storage, root.MediaShuttleApi.StorageList);
  }
}(this, function(ApiClient, Error, Storage, StorageList) {
  'use strict';

  /**
   * Storage service.
   * @module api/StorageApi
   * @version 1.13.3
   */

  /**
   * Constructs a new StorageApi. 
   * @alias module:api/StorageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createStorage operation.
     * @callback module:api/StorageApi~createStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Storage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new storage location
     * Create a new storage location for an account.  Cloud storage configuration values are validated for file location access.  Creating Local Storage generates a new Storage Server Installation Key. Use the installation key during Storage Server installation to register a server with your account. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Storage} opts.storage The attributes of the storage to be created. All create storage requests must include the storage \"type\". Cloud storage requests must include a valid \"configuration\" object. 
     * @param {module:api/StorageApi~createStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Storage}
     */
    this.createStorage = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['storage'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Storage;

      return this.apiClient.callApi(
        '/storage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStorage operation.
     * @callback module:api/StorageApi~getStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Storage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display information about a specific storage location
     * Returns details about a specific storage location associated with the account by its storageId.
     * @param {String} storageId Storage ID.
     * @param {module:api/StorageApi~getStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Storage}
     */
    this.getStorage = function(storageId, callback) {
      var postBody = null;

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling getStorage");
      }


      var pathParams = {
        'storageId': storageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Storage;

      return this.apiClient.callApi(
        '/storage/{storageId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStorage operation.
     * @callback module:api/StorageApi~listStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List storage location
     * Gets a list of storage locations associated with the account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.installationKey Use an installationKey value to filter the request.
     * @param {module:api/StorageApi~listStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageList}
     */
    this.listStorage = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'installationKey': opts['installationKey'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StorageList;

      return this.apiClient.callApi(
        '/storage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
