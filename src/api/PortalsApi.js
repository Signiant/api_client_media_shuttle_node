/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Portal', 'model/PortalList', 'model/PortalMember', 'model/PortalMemberRequest', 'model/PortalStorage', 'model/PortalStorageList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Portal'), require('../model/PortalList'), require('../model/PortalMember'), require('../model/PortalMemberRequest'), require('../model/PortalStorage'), require('../model/PortalStorageList'));
  } else {
    // Browser globals (root is window)
    if (!root.MediaShuttleApi) {
      root.MediaShuttleApi = {};
    }
    root.MediaShuttleApi.PortalsApi = factory(root.MediaShuttleApi.ApiClient, root.MediaShuttleApi.Error, root.MediaShuttleApi.Portal, root.MediaShuttleApi.PortalList, root.MediaShuttleApi.PortalMember, root.MediaShuttleApi.PortalMemberRequest, root.MediaShuttleApi.PortalStorage, root.MediaShuttleApi.PortalStorageList);
  }
}(this, function(ApiClient, Error, Portal, PortalList, PortalMember, PortalMemberRequest, PortalStorage, PortalStorageList) {
  'use strict';

  /**
   * Portals service.
   * @module api/PortalsApi
   * @version 1.13.3
   */

  /**
   * Constructs a new PortalsApi. 
   * @alias module:api/PortalsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addUserToPortal operation.
     * @callback module:api/PortalsApi~addUserToPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a portal with a role and permissions
     * Adds a user with a given email, role, and permissions to a portal. The role value can be either `Member` or `Ops`. If permissions aren't specified, default permissions will be populated.
     * @param {String} portalId Unique portal identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/PortalMember} opts.user The user email, role, and permissions to add to the portal
     * @param {module:api/PortalsApi~addUserToPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalMember}
     */
    this.addUserToPortal = function(portalId, opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling addUserToPortal");
      }


      var pathParams = {
        'portalId': portalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalMember;

      return this.apiClient.callApi(
        '/portals/{portalId}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignStorageToPortal operation.
     * @callback module:api/PortalsApi~assignStorageToPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalStorage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign storage to a portal
     * Assigns storage to a portal. If local storage is being assigned, a repository path can be provided in the request body.  Storage is only assigned if there is no prior storage attached to the portal. This field is ignored for other types of storage. If a storageId is sent as part of the request body, it is validated against the storageId in the path, however the value is not required in the body. Storage must be unassigned using the Media Shuttle Configuration Console. 
     * @param {String} portalId Unique portal identifier
     * @param {String} storageId ID of the storage to assign.
     * @param {Object} opts Optional parameters
     * @param {module:model/PortalStorage} opts.repositoryPath The path to the repository on the local storage system. If a value is not provided, the repositoryPath is set to either a default value or to a previously configured repositoryPath.
     * @param {module:api/PortalsApi~assignStorageToPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalStorage}
     */
    this.assignStorageToPortal = function(portalId, storageId, opts, callback) {
      opts = opts || {};
      var postBody = opts['repositoryPath'];

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling assignStorageToPortal");
      }

      // verify the required parameter 'storageId' is set
      if (storageId === undefined || storageId === null) {
        throw new Error("Missing the required parameter 'storageId' when calling assignStorageToPortal");
      }


      var pathParams = {
        'portalId': portalId,
        'storageId': storageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalStorage;

      return this.apiClient.callApi(
        '/portals/{portalId}/storage/{storageId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignUserToPortal operation.
     * @callback module:api/PortalsApi~assignUserToPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the user's role and/or permissions
     * Updates the user's role and/or permissions. The email value is mandatory. The role value can be either `Member` or `Ops`. If permissions aren't specified, the member permissions will be unchanged. When an email is set as part of the request body, it is validated against the email in the path. This value is not required in the body.
     * @param {String} portalId Unique portal identifier
     * @param {String} email Email of the user to add to the portal
     * @param {Object} opts Optional parameters
     * @param {module:model/PortalMember} opts.role The role, and permissions to assign to the user
     * @param {module:api/PortalsApi~assignUserToPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalMember}
     */
    this.assignUserToPortal = function(portalId, email, opts, callback) {
      opts = opts || {};
      var postBody = opts['role'];

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling assignUserToPortal");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling assignUserToPortal");
      }


      var pathParams = {
        'portalId': portalId,
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalMember;

      return this.apiClient.callApi(
        '/portals/{portalId}/users/{email}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortal operation.
     * @callback module:api/PortalsApi~createPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new portal
     * Creates a new portal. If values are not specified, a Share portal with default values is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/Portal} opts.portal The basic attributes of the portal to be created.
     * @param {module:api/PortalsApi~createPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portal}
     */
    this.createPortal = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['portal'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Portal;

      return this.apiClient.callApi(
        '/portals', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersFromPortal operation.
     * @callback module:api/PortalsApi~getMembersFromPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalMemberRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all members from a portal
     * Return a list of all email addresses for all members from a portal. Any error returned during a response will appear in the response body.
     * @param {String} portalId Unique portal identifier
     * @param {module:api/PortalsApi~getMembersFromPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalMemberRequest}
     */
    this.getMembersFromPortal = function(portalId, callback) {
      var postBody = null;

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling getMembersFromPortal");
      }


      var pathParams = {
        'portalId': portalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalMemberRequest;

      return this.apiClient.callApi(
        '/portals/{portalId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortalMember operation.
     * @callback module:api/PortalsApi~getPortalMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a portal member
     * Fetch a portal member identified by their email address. The response body contains the permissions assigned to the portal member for this portal, their role, and the expiry date for the member's account if set.
     * @param {String} portalId Unique portal identifier
     * @param {String} email Email of the member to fetch for the portal.
     * @param {module:api/PortalsApi~getPortalMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalMember}
     */
    this.getPortalMember = function(portalId, email, callback) {
      var postBody = null;

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling getPortalMember");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getPortalMember");
      }


      var pathParams = {
        'portalId': portalId,
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalMember;

      return this.apiClient.callApi(
        '/portals/{portalId}/users/{email}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortalStorage operation.
     * @callback module:api/PortalsApi~getPortalStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalStorageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the storage locations assigned to a portal
     * Gets a list of all storage locations (On-premises or Cloud) assigned to a portal
     * @param {String} portalId Portal ID.
     * @param {module:api/PortalsApi~getPortalStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalStorageList}
     */
    this.getPortalStorage = function(portalId, callback) {
      var postBody = null;

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling getPortalStorage");
      }


      var pathParams = {
        'portalId': portalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalStorageList;

      return this.apiClient.callApi(
        '/portals/{portalId}/storage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortals operation.
     * @callback module:api/PortalsApi~getPortalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List portals
     * Gets a list of portals associated with the account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.url Filter the response by portal access URL. The URL must include the \".mediashuttle.com\" domain suffix.
     * @param {module:api/PortalsApi~getPortalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalList}
     */
    this.getPortals = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'url': opts['url'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalList;

      return this.apiClient.callApi(
        '/portals', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromPortal operation.
     * @callback module:api/PortalsApi~removeUserFromPortalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a portal
     * Removes a user from a portal and returns the removed user record. If the user was not assigned to the portal, an HTTP 204 No Content response is returned with an empty response body. Any user-customized folder settings are deleted. 
     * @param {String} portalId Unique portal identifier
     * @param {String} email Email of the user to remove from the portal
     * @param {module:api/PortalsApi~removeUserFromPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalMember}
     */
    this.removeUserFromPortal = function(portalId, email, callback) {
      var postBody = null;

      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling removeUserFromPortal");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling removeUserFromPortal");
      }


      var pathParams = {
        'portalId': portalId,
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortalMember;

      return this.apiClient.callApi(
        '/portals/{portalId}/users/{email}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
