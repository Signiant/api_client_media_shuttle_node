/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MediaShuttleApi) {
      root.MediaShuttleApi = {};
    }
    root.MediaShuttleApi.PackageTokenRequest = factory(root.MediaShuttleApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The PackageTokenRequest model module.
   * @module model/PackageTokenRequest
   * @version 1.13.3
   */

  /**
   * Constructs a new <code>PackageTokenRequest</code>.
   * @alias module:model/PackageTokenRequest
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>PackageTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PackageTokenRequest} obj Optional instance to populate.
   * @return {module:model/PackageTokenRequest} The populated <code>PackageTokenRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], Object);
      if (data.hasOwnProperty('grants'))
        obj.grants = ApiClient.convertToType(data['grants'], ['String']);
      if (data.hasOwnProperty('expiresOn'))
        obj.expiresOn = ApiClient.convertToType(data['expiresOn'], 'Date');
      if (data.hasOwnProperty('destinationPath'))
        obj.destinationPath = ApiClient.convertToType(data['destinationPath'], 'String');
      if (data.hasOwnProperty('notifications'))
        obj.notifications = ApiClient.convertToType(data['notifications'], [Object]);
    }
    return obj;
  }

  /**
   * The user who will be issued the token, allowing them to upload or download package files. 
   * @member {Object} user
   */
  exports.prototype.user = undefined;

  /**
   * The permissions to be granted to the user who will be issued the token. Currently, permission grants are limited to one per token, however, we are reserving the property type as an array for future use in which we envision multiple grants being allowed. 
   * @member {Array.<module:model/PackageTokenRequest.GrantsEnum>} grants
   */
  exports.prototype.grants = undefined;

  /**
   * The date/time the transfer token expires. If this value is not set, tokens will expire according to the portal settings for maintenance cleanup, regular link expiry, or after 90 days, whichever is sooner.  
   * @member {Date} expiresOn
   */
  exports.prototype.expiresOn = undefined;

  /**
   * The subdirectory on the portal where the files will be uploaded. Valid for upload grants on share portals only. 
   * @member {String} destinationPath
   */
  exports.prototype.destinationPath = undefined;

  /**
   * Request notifications for token lifecycle events. Supported events are: - tokenRedeemed: When the token is redeemed. - package.upload.complete: When a package upload is complete. - package.download.complete: When a package download is complete.  User actions will fire more than one event. For example, successfully uploading content to a package will trigger a package.upload.complete event and a tokenRedeemed event.  Signiant recommends that webhook handlers check the event type to ensure future compatibility. 
   * @member {Array.<Object>} notifications
   */
  exports.prototype.notifications = undefined;



  /**
   * Allowed values for the <code>grants</code> property.
   * @enum {String}
   * @readonly
   */
  exports.GrantsEnum = {
    /**
     * value: "upload"
     * @const
     */
    upload: "upload",

    /**
     * value: "download"
     * @const
     */
    download: "download"
  };

  return exports;

}));
