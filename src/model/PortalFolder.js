/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MediaShuttleApi) {
      root.MediaShuttleApi = {};
    }
    root.MediaShuttleApi.PortalFolder = factory(root.MediaShuttleApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The PortalFolder model module.
   * @module model/PortalFolder
   * @version 1.13.3
   */

  /**
   * Constructs a new <code>PortalFolder</code>.
   * Describes a folder for a share portal consisting of a path, a userHome designation, and folder permissions
   * @alias module:model/PortalFolder
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>PortalFolder</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PortalFolder} obj Optional instance to populate.
   * @return {module:model/PortalFolder} The populated <code>PortalFolder</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('userHome'))
        obj.userHome = ApiClient.convertToType(data['userHome'], 'Boolean');
      if (data.hasOwnProperty('canUpload'))
        obj.canUpload = ApiClient.convertToType(data['canUpload'], 'Boolean');
      if (data.hasOwnProperty('canDownload'))
        obj.canDownload = ApiClient.convertToType(data['canDownload'], 'Boolean');
      if (data.hasOwnProperty('canDoFileOperations'))
        obj.canDoFileOperations = ApiClient.convertToType(data['canDoFileOperations'], 'Boolean');
    }
    return obj;
  }

  /**
   * The case-sensitive path to the folder relative to the storage repository path.  For example, if you are using local storage your full path is composed of 2 parts: * The repositoryPath (e.g. /example/repository/path) * The path here (e.g. /user/portal/folder)  In the example above the resolved path on the file system would be '/example/repository/path/user/portal/folder'. You should *not* provide the absolute path in the file system here as input, only paths relative to the repositoryPath will function.  The following paths are forbidden:  * Paths that contain .. * Paths that resolve to the same path as another folder. * Paths that represent a subfolder of another path.  This path is *not* verified against the relevant storage, all paths will be accepted but non-existant paths will return no results.  Finally to provide a consistent path presentation this API will normalize any paths provided. So a path like \\my\\.\\example\\path will become /my/example/path 
   * @member {String} path
   */
  exports.prototype.path = undefined;

  /**
   * This folder represents the home folder of the user. All other folders are considered linked folders. When modifying folder permissions exactly one folder must be marked as userHome. Omitted userHome properties are assumed to be false.
   * @member {Boolean} userHome
   */
  exports.prototype.userHome = undefined;

  /**
   * The user can upload content to this folder
   * @member {Boolean} canUpload
   */
  exports.prototype.canUpload = undefined;

  /**
   * The user can download content from this folder
   * @member {Boolean} canDownload
   */
  exports.prototype.canDownload = undefined;

  /**
   * The user can perform file operations on content in this folder
   * @member {Boolean} canDoFileOperations
   */
  exports.prototype.canDoFileOperations = undefined;


  return exports;

}));
