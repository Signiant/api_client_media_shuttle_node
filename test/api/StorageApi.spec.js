/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MediaShuttleApi);
  }
}(this, function(expect, MediaShuttleApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MediaShuttleApi.StorageApi();
  });

  describe('(package)', function() {
    describe('StorageApi', function() {
      describe('createStorage', function() {
        it('should call createStorage successfully', function(done) {
          // TODO: uncomment, update parameter values for createStorage call and complete the assertions
          /*
          var opts = {};
          opts.storage = new MediaShuttleApi.Storage();
          opts.storage.id = "35460d47-019b-4e06-8108-18343b235108";
          opts.storage.type = "s3";
          opts.storage.relays = ["relay1.host1","relay2.host2"];
          opts.storage.configuration = {"externalId":"dd6b5908-6b58-47b3-89a7-13055c74c712","roleARN":"arn:aws:iam::123456789012:role/SigniantMediaShuttleRole","bucket":"bucket-name","filePrefix":"path/prefix","serverSideEncryption":true};

          instance.createStorage(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.Storage);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("35460d47-019b-4e06-8108-18343b235108");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("s3");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("available");
            {
              let dataCtr = data.relays;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.configuration).to.be.a(Object);
            expect(data.configuration).to.be({"externalId":"dd6b5908-6b58-47b3-89a7-13055c74c712","roleARN":"arn:aws:iam::123456789012:role/SigniantMediaShuttleRole","bucket":"bucket-name","filePrefix":"path/prefix","serverSideEncryption":true});

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStorage', function() {
        it('should call getStorage successfully', function(done) {
          // TODO: uncomment, update parameter values for getStorage call and complete the assertions
          /*
          var storageId = "storageId_example";

          instance.getStorage(storageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.Storage);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("35460d47-019b-4e06-8108-18343b235108");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("s3");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("available");
            {
              let dataCtr = data.relays;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.configuration).to.be.a(Object);
            expect(data.configuration).to.be({"externalId":"dd6b5908-6b58-47b3-89a7-13055c74c712","roleARN":"arn:aws:iam::123456789012:role/SigniantMediaShuttleRole","bucket":"bucket-name","filePrefix":"path/prefix","serverSideEncryption":true});

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listStorage', function() {
        it('should call listStorage successfully', function(done) {
          // TODO: uncomment, update parameter values for listStorage call and complete the assertions
          /*
          var opts = {};
          opts.installationKey = "installationKey_example";

          instance.listStorage(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.StorageList);
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MediaShuttleApi.Storage);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("35460d47-019b-4e06-8108-18343b235108");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("s3");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("available");
                {
                  let dataCtr = data.relays;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.configuration).to.be.a(Object);
                expect(data.configuration).to.be({"externalId":"dd6b5908-6b58-47b3-89a7-13055c74c712","roleARN":"arn:aws:iam::123456789012:role/SigniantMediaShuttleRole","bucket":"bucket-name","filePrefix":"path/prefix","serverSideEncryption":true});

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
