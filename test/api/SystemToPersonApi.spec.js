/*
 * Media Shuttle API
 * Signiant's **Media Shuttle Management API** endpoints allows you to automate portal and storage management and view active transfers using your own web applications.  The **System-to-Person API** allows you to create upload and download links directly from other applications, letting you accelerate file transfers through Media Shuttle.  For more information about getting started with the Media Shuttle API, read our [Getting Started Guide](http://developer.signiant.com/msapi/getting-started.html).  ---   You can test API endpoints using your Media Shuttle subscription by generating an API key from your IT Administration user menu, in the **Developer** section.  Once you have generated an API key, click the **Authorize** button, and enter your API key in the **Value** field, and click **Authorize** to enable the examples. 
 *
 * OpenAPI spec version: 1.13.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MediaShuttleApi);
  }
}(this, function(expect, MediaShuttleApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MediaShuttleApi.SystemToPersonApi();
  });

  describe('(package)', function() {
    describe('SystemToPersonApi', function() {
      describe('createPortalSubscription', function() {
        it('should call createPortalSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for createPortalSubscription call and complete the assertions
          /*
          var portalId = "portalId_example";
          var portalSubscriptionRequest = new MediaShuttleApi.PortalSubscriptionRequest();
          portalSubscriptionRequest.type = "webhook";
          portalSubscriptionRequest.details = ;

          instance.createPortalSubscription(portalId, portalSubscriptionRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.PortalSubscriptionResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("679b9f1c-795e-4c18-90c3-ed7b4aab898a");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("webhook");
            expect(data.details).to.be.a(Object);
            expect(data.details).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createToken', function() {
        it('should call createToken successfully', function(done) {
          // TODO: uncomment, update parameter values for createToken call and complete the assertions
          /*
          var portalId = "portalId_example";
          var packageId = "packageId_example";
          var packageTokenRequest = new MediaShuttleApi.PackageTokenRequest();
          packageTokenRequest.user = ;
          packageTokenRequest.grants = ["upload"]"upload";
          packageTokenRequest.expiresOn = 2017-08-15T10:31:58.547Z;
          packageTokenRequest.destinationPath = "/folder1/subfolder2";
          packageTokenRequest.notifications = [{"type":"webhook","url":"https://example.com/hook/catch/abc/"}];

          instance.createToken(portalId, packageId, packageTokenRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.PackageTokenResponse);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("679b9f1c-795e-4c18-90c3-ed7b4aab898a");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("https://myportal.mediashuttle.com/packageRequest?packageToken=jwt");
            expect(data.createdOn).to.be.a(Date);
            expect(data.createdOn).to.be(2017-08-15T10:31:58.547Z);
            expect(data.expiresOn).to.be.a(Date);
            expect(data.expiresOn).to.be(2017-08-15T10:31:58.547Z);
            expect(data.user).to.be.a(Object);
            expect(data.user).to.be();
            {
              let dataCtr = data.grants;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("upload");
              }
            }
            expect(data.destinationPath).to.be.a('string');
            expect(data.destinationPath).to.be("/folder1/subfolder2");
            {
              let dataCtr = data.notifications;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be({"type":"webhook","url":"https://example.com/hook/catch/abc/"});
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePortalSubscription', function() {
        it('should call deletePortalSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePortalSubscription call
          /*
          var portalId = "portalId_example";
          var subscriptionId = "subscriptionId_example";

          instance.deletePortalSubscription(portalId, subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPackages', function() {
        it('should call getPackages successfully', function(done) {
          // TODO: uncomment, update parameter values for getPackages call and complete the assertions
          /*
          var portalId = "portalId_example";
          var packageId = "packageId_example";

          instance.getPackages(portalId, packageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.ModelPackage);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("6rdz0s60214xGEFu8gWERl");
            expect(data.portalId).to.be.a('string');
            expect(data.portalId).to.be("61a1d109-d553-4052-9c0e-814f1ded4b68");
            expect(data.createdOn).to.be.a(Date);
            expect(data.createdOn).to.be(2017-08-15T10:31:58.547Z);
            expect(data.metadata).to.be.a(Object);
            expect(data.metadata).to.be({"packageTitle":"An Example Title","description":"A description of the file transferred","fileType":"video-mp4","language":"English"});

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPortalSubscriptions', function() {
        it('should call getPortalSubscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getPortalSubscriptions call and complete the assertions
          /*
          var portalId = "portalId_example";

          instance.getPortalSubscriptions(portalId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.PortalSubscriptionsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portalsPortalIdPackagesPackageIdEventsGet', function() {
        it('should call portalsPortalIdPackagesPackageIdEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portalsPortalIdPackagesPackageIdEventsGet call and complete the assertions
          /*
          var portalId = "portalId_example";
          var packageId = "packageId_example";

          instance.portalsPortalIdPackagesPackageIdEventsGet(portalId, packageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.PackageEventSetResponse);
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MediaShuttleApi.PackageEventResponse);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("Upload Failed");
                expect(data.details).to.be.a('string');
                expect(data.details).to.be("Failed Upload by user@example.com for file example.mp4");
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("Error");
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2017-11-30T15:08:12.643Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portalsPortalIdPackagesPackageIdFilesGet', function() {
        it('should call portalsPortalIdPackagesPackageIdFilesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for portalsPortalIdPackagesPackageIdFilesGet call and complete the assertions
          /*
          var portalId = "portalId_example";
          var packageId = "packageId_example";

          instance.portalsPortalIdPackagesPackageIdFilesGet(portalId, packageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.FileSetResponse);
            {
              let dataCtr = data.files;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MediaShuttleApi.FileResponse);
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("example/example_file.mp4");
                expect(data.isDirectory).to.be.a('boolean');
                expect(data.isDirectory).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(200000.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portalsPortalIdPackagesPost', function() {
        it('should call portalsPortalIdPackagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for portalsPortalIdPackagesPost call and complete the assertions
          /*
          var portalId = "portalId_example";

          instance.portalsPortalIdPackagesPost(portalId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.ModelPackage);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("6rdz0s60214xGEFu8gWERl");
            expect(data.portalId).to.be.a('string');
            expect(data.portalId).to.be("61a1d109-d553-4052-9c0e-814f1ded4b68");
            expect(data.createdOn).to.be.a(Date);
            expect(data.createdOn).to.be(2017-08-15T10:31:58.547Z);
            expect(data.metadata).to.be.a(Object);
            expect(data.metadata).to.be({"packageTitle":"An Example Title","description":"A description of the file transferred","fileType":"video-mp4","language":"English"});

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putPackages', function() {
        it('should call putPackages successfully', function(done) {
          // TODO: uncomment, update parameter values for putPackages call and complete the assertions
          /*
          var portalId = "portalId_example";
          var packageId = "packageId_example";
          var fileset = new MediaShuttleApi.FileSetRequest();
          fileset.files = [new MediaShuttleApi.FileRequest()];
          fileset.files[0].path = "example/example_file.mp4";
          fileset.files[0].isDirectory = false;
          fileset.files[0].size = 200000.0;

          instance.putPackages(portalId, packageId, fileset, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MediaShuttleApi.FileSetResponse);
            {
              let dataCtr = data.files;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MediaShuttleApi.FileResponse);
                expect(data.path).to.be.a('string');
                expect(data.path).to.be("example/example_file.mp4");
                expect(data.isDirectory).to.be.a('boolean');
                expect(data.isDirectory).to.be(false);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(200000.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
